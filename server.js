// Generated by CoffeeScript 1.6.2
var LATENCY, Shape, app, collections, crypto, db, fs, handler, io, mongo, refresh, shape, shapes,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

mongo = require('mongojs');

collections = ['shapes'];

db = mongo.connect('mongodb://localhost:27017/test', collections);

shapes = require('./shapes');

shapes = new shapes.shapesDAO(db);

shape = null;

db.shapes.find({
  name: "alma"
}, function(err, dbshape) {
  if (err) {
    return console.log("Mongo Error!");
  } else {
    shape = new Shape(dbshape[0].x, dbshape[0].y);
    return console.log(shape);
  }
});

LATENCY = 0;

Shape = (function() {
  function Shape(x, y) {
    this.x = x;
    this.y = y;
    this.set = __bind(this.set, this);
  }

  Shape.prototype.set = function(x, y) {
    this.x = x;
    this.y = y;
    return db.shapes.update({
      name: "alma"
    }, {
      $set: {
        x: x,
        y: y
      }
    }, function(err, updated) {
      if (err || !updated) {
        return console.log("Shape not updated");
      } else {
        return console.log("Shape updated!");
      }
    });
  };

  return Shape;

})();

handler = function(req, res) {
  return fs.readFile(__dirname + "/index.html", function(err, data) {
    if (err) {
      res.writeHead(500);
      return res.end("Error loading index.html");
    }
    res.writeHead(200);
    return res.end(data);
  });
};

app = require("http").createServer(handler);

io = require("socket.io").listen(app);

fs = require("fs");

crypto = require("crypto");

app.listen(8080);

refresh = function(socket) {
  console.log("refreshing");
  return shapes.getShapes(function(items) {
    console.log(items);
    return socket.emit("collab", items);
  });
};

io.sockets.on("connection", function(socket) {
  socket.join("room");
  io.sockets["in"]("room").emit("chat", {
    sender: "system",
    hello: "Client connected"
  });
  socket.emit("news", {
    sender: "system",
    hello: "Hello world"
  });
  refresh(socket);
  socket.on("update", function(data) {
    console.log(data);
    return shapes.updateShape(data._id, data.x, data.y, function(num) {
      return shapes.getShapes(function(items) {
        return io.sockets["in"]("room").emit("collab", items);
      });
    });
  });
  socket.on("collab", function(data) {});
  socket.on("chat", function(data) {
    var command, md5sum;

    md5sum = crypto.createHash("md5");
    md5sum.update(socket.id);
    command = data.hello.split(" ");
    console.log(command);
    if (command[0] === "add") {
      shapes.addShape(command[1], command[2], command[3], function(num) {
        socket.emit("chat", {
          sender: "system",
          hello: num.length
        });
        return refresh(socket);
      });
    }
    if (command[0] === "help") {
      socket.emit("chat", {
        sender: "system",
        hello: "available commands: delete &lt;name&gt;, add &lt;x&gt; &lt;y&gt; &lt;name&gt;"
      });
    }
    if (command[0] === "delete") {
      return shapes.deleteShape(command[1], function(deleted_id) {
        socket.emit("chat", {
          sender: "system",
          hello: deleted_id
        });
        return io.sockets["in"]("room").emit("delete", {
          sender: "system",
          id: deleted_id
        });
      });
    }
  });
  return socket.on("disconnect", function() {
    return io.sockets["in"]("room").emit("chat", {
      sender: "system",
      hello: "Client disconnect"
    });
  });
});
