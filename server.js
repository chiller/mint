// Generated by CoffeeScript 1.5.0-pre
var LATENCY, Shape, app, crypto, fs, handler, io, shape,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

LATENCY = 0;

Shape = (function() {

  function Shape(x, y) {
    this.x = x;
    this.y = y;
    this.set = __bind(this.set, this);
  }

  Shape.prototype.set = function(x, y) {
    this.x = x;
    return this.y = y;
  };

  return Shape;

})();

shape = new Shape(100, 100);

console.log(shape);

handler = function(req, res) {
  return fs.readFile(__dirname + "/index.html", function(err, data) {
    if (err) {
      res.writeHead(500);
      return res.end("Error loading index.html");
    }
    res.writeHead(200);
    return res.end(data);
  });
};

app = require("http").createServer(handler);

io = require("socket.io").listen(app);

fs = require("fs");

crypto = require("crypto");

app.listen(8080);

io.sockets.on("connection", function(socket) {
  socket.join("room");
  io.sockets["in"]("room").emit("chat", {
    sender: "system",
    hello: "Client connected"
  });
  socket.emit("news", {
    sender: "system",
    hello: "Hello world"
  });
  socket.emit("collab", {
    sender: "system",
    shape: shape
  });
  socket.on("collab", function(data) {
    var xshape;
    shape = data.shape;
    xshape = shape;
    return (function(xshape) {
      var _this = this;
      return setTimeout(function() {
        return io.sockets["in"]("room").emit("collab", {
          sender: "system",
          shape: xshape
        });
      }, LATENCY);
    })(xshape);
  });
  socket.on("chat", function(data) {
    var md5sum;
    md5sum = crypto.createHash("md5");
    md5sum.update(socket.id);
    return io.sockets["in"]("room").emit("chat", {
      sender: md5sum.digest("hex"),
      hello: data.hello
    });
  });
  return socket.on("disconnect", function() {
    return io.sockets["in"]("room").emit("chat", {
      sender: "system",
      hello: "Client disconnect"
    });
  });
});
